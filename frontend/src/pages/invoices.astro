---
import Layout from '../layouts/Layout.astro';
import PageHeader from '../components/PageHeader.astro';
import PageFooter from '../components/PageFooter.astro';

let invoices = [];
let isTestData = false;

// Pagination: extract currentPage and limit from URL params
const urlParams = new URLSearchParams(Astro.request.url.split('?')[1] || '');
const currentPage = parseInt(urlParams.get('page') || '1', 10);
const limit = parseInt(urlParams.get('limit') || '10', 10);

try {
  // Always use explicit full API URL for server-side fetch
  const apiUrl = new URL(
    'http://localhost:4321/api/getZohoInvoicesWithLineItems'
  );
  apiUrl.searchParams.set('page', currentPage.toString());
  apiUrl.searchParams.set('limit', limit.toString());
  console.log('Fetching invoices from:', apiUrl.toString());
  const response = await fetch(apiUrl.toString());
  const json = await response.json();

  if (json?.invoices?.length) {
    invoices = json.invoices;
    isTestData = true;
  } else if (json?.data?.invoices?.length) {
    invoices = json.data.invoices;
  } else {
    invoices = [];
  }
} catch (error) {
  console.error('Error fetching invoices:', error);
  invoices = [];
}
---

<Layout>
  <div class='flex flex-col min-h-screen bg-neutral-900'>
    <div class='flex-1 overflow-auto px-0 pb-[60px]'>
      <table class='w-full'>
        <thead class='bg-neutral-800 text-gray-300 sticky top-0 z-20 shadow-[0_2px_4px_-1px_rgba(0,0,0,0.1)]'>
          <div class='px-6 py-4'>
            <PageHeader>Header</PageHeader>
            <h1 class='text-3xl font-bold mb-2'>Invoices</h1>
          </div>
          <tr>
            <th class='px-6 py-3 text-left text-sm uppercase tracking-wider'>
              <input
                type='checkbox'
                id='select-all'
                class='form-checkbox text-blue-600'
              />
            </th>
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Invoice #</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Customer Name</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Date</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Status</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Due Date</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Invoice Amt</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Balance</th
            >
            <th
              class='px-6 py-3 text-left text-sm uppercase tracking-wider cursor-pointer'
              >Order #</th
            >
            <th class='px-6 py-3 text-left text-sm uppercase tracking-wider'
              >Actions</th
            >
          </tr>
        </thead>
        <tbody class='bg-neutral-900'>
          {
            invoices.length > 0 ? (
              invoices.map((invoice) => (
                <>
                  <tr
                    class='hover:bg-blue-700 transition-colors duration-200 cursor-pointer'
                    data-invoice-id={invoice.invoice_id}
                  >
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-gray-200'>
                      <input
                        type='checkbox'
                        class='form-checkbox text-blue-600 row-checkbox'
                      />
                    </td>
                    <td
                      class='px-6 py-4 whitespace-nowrap text-sm text-blue-400 hover:underline cursor-pointer'
                      data-invoice-toggle
                    >
                      {invoice.invoice_number}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-gray-200'>
                      {invoice.cf_customer_name}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200'>
                      {invoice.date || '—'}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-center text-green-400'>
                      {invoice.status}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200'>
                      {invoice.due_date}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200'>
                      ${Number(invoice.total || 0).toFixed(2)}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200'>
                      ${Number(invoice.balance || 0).toFixed(2)}
                    </td>
                    <td class='px-6 py-4 whitespace-normal text-sm text-gray-200'>
                      {invoice.reference_number || '—'}
                    </td>
                    <td class='px-6 py-4 whitespace-nowrap text-sm text-gray-200 text-center'>
                      <div class='relative inline-block text-left'>
                        <button
                          class='text-gray-400 hover:text-white focus:outline-none'
                          aria-label='Open actions'
                        >
                          &#8942;
                        </button>
                      </div>
                    </td>
                  </tr>
                  <tr
                    class='hidden bg-neutral-800'
                    data-invoice-details-for={invoice.invoice_id}
                  >
                    <td colspan='10' class='px-6 py-4 text-sm text-gray-300'>
                      {Array.isArray(invoice.line_items) &&
                      invoice.line_items.length > 0 ? (
                        <table class='w-full text-xs'>
                          <thead>
                            <tr class='text-sm uppercase text-gray-400 bg-neutral-800'>
                              <th class='px-3 py-2 text-left'>Description</th>
                              <th class='px-3 py-2 text-right'>Quantity</th>
                              <th class='px-3 py-2 text-right'>Price</th>
                              <th class='px-3 py-2 text-right'>Total</th>
                            </tr>
                          </thead>
                          <tbody>
                            {invoice.line_items.map((item) => (
                              <tr key={item.item_id || item.description}>
                                <td class='px-3 py-1 text-gray-300'>
                                  {item.name || item.description || '—'}
                                </td>
                                <td class='px-3 py-1 text-right text-gray-400'>
                                  {item.quantity ?? '—'}
                                </td>
                                <td class='px-3 py-1 text-right text-gray-400'>
                                  $
                                  {Number(item.rate || item.price || 0).toFixed(
                                    2
                                  )}
                                </td>
                                <td class='px-3 py-1 text-right text-gray-200'>
                                  $
                                  {Number(
                                    (typeof item.quantity === 'number'
                                      ? item.quantity
                                      : parseFloat(item.quantity || 0)) *
                                      (typeof item.rate === 'number'
                                        ? item.rate
                                        : parseFloat(
                                            item.rate || item.price || 0
                                          ))
                                  ).toFixed(2)}
                                </td>
                              </tr>
                            ))}
                            <tr>
                              <td
                                class='px-3 py-2 text-right text-gray-300'
                                colspan='3'
                              >
                                Total:
                              </td>
                              <td class='px-3 py-2 text-right text-gray-100'>
                                $
                                {invoice.line_items
                                  .reduce(
                                    (sum, item) =>
                                      sum +
                                      (typeof item.quantity === 'number'
                                        ? item.quantity
                                        : parseFloat(item.quantity || 0)) *
                                        (typeof item.rate === 'number'
                                          ? item.rate
                                          : parseFloat(
                                              item.rate || item.price || 0
                                            )),
                                    0
                                  )
                                  .toFixed(2)}
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      ) : (
                        <div class='text-gray-500 italic'>No line items.</div>
                      )}
                    </td>
                  </tr>
                </>
              ))
            ) : (
              <tr>
                <td colspan='10' class='px-6 py-4 text-center text-gray-400'>
                  No invoices found.
                </td>
              </tr>
            )
          }
        </tbody>
      </table>
    </div>
  </div>
  <input type='hidden' id='current-page' value={currentPage} />
  <input type='hidden' id='limit' value={limit} />
  <PageFooter>
    <div
      class='fixed bottom-0 left-0 w-full z-20 h-[50px] bg-neutral-900 text-white flex items-center justify-center border-t border-neutral-700'
    >
      <div
        class='flex items-center rounded border border-neutral-700 overflow-hidden text-white text-sm bg-neutral-900 shadow-lg'
      >
        <form id='per-page-form'>
          <select
            name='limit'
            class='bg-neutral-800 text-white px-4 py-1.5 border-r border-neutral-700 focus:outline-none'
          >
            {
              [10, 25, 50, 100, 200].map((val) => (
                <option value={val} selected={val === limit}>
                  {val} per page
                </option>
              ))
            }
          </select>
        </form>
        <button
          id='prev-btn'
          type='button'
          class={`px-2 py-1.5 text-blue-500 hover:underline`}>&lsaquo;</button
        >
        <span class='px-4 py-1.5 bg-neutral-900 border-x border-neutral-700'>
          {
            invoices.length > 0
              ? `${(currentPage - 1) * limit + 1} - ${(currentPage - 1) * limit + invoices.length}`
              : 'No invoices'
          }
        </span>
        <button
          id='next-btn'
          type='button'
          class={`px-2 py-1.5 text-blue-500 hover:underline`}>&rsaquo;</button
        >
      </div>
    </div>
  </PageFooter>

  <script type='module'>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.querySelector('form#per-page-form');
      const tableBody = document.querySelector('tbody');
      const paginationDisplay = document.querySelector('span.px-4');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const selectAllCheckbox = document.getElementById('select-all');
      let currentPage = parseInt(
        document.querySelector('#current-page').value,
        10
      );
      let limit = parseInt(document.querySelector('#limit').value, 10);
      let hasMorePage = false;

      function updatePaginationButtons() {
        // Previous button
        if (currentPage === 1) {
          prevBtn.disabled = true;
          prevBtn.classList.add('pointer-events-none', 'text-gray-500');
          prevBtn.classList.remove('text-blue-500');
        } else {
          prevBtn.disabled = false;
          prevBtn.classList.remove('pointer-events-none', 'text-gray-500');
          prevBtn.classList.add('text-blue-500');
        }
        // Next button
        if (!hasMorePage) {
          nextBtn.disabled = true;
          nextBtn.classList.add('pointer-events-none', 'text-gray-500');
          nextBtn.classList.remove('text-blue-500');
        } else {
          nextBtn.disabled = false;
          nextBtn.classList.remove('pointer-events-none', 'text-gray-500');
          nextBtn.classList.add('text-blue-500');
        }
      }

      async function fetchAndRenderInvoices(page, limit) {
        const url = new URL(
          '/api/getZohoInvoicesWithLineItems',
          window.location.origin
        );
        url.searchParams.set('page', page);
        url.searchParams.set('limit', limit);
        const res = await fetch(url);
        const json = await res.json();
        const invoices = json.invoices || json.data?.invoices || [];
        hasMorePage = invoices.length === limit;

        // Render table rows
        tableBody.innerHTML =
          invoices.length > 0
            ? invoices
                .map((invoice) => {
                  // Render line items sub-table if present, else "No line items."
                  let lineItemsHtml = '';
                  if (
                    Array.isArray(invoice.line_items) &&
                    invoice.line_items.length > 0
                  ) {
                    // Sub-table for line items
                    const itemsRows = invoice.line_items.reduce(
                      (html, item) =>
                        html +
                        `
                          <tr>
                            <td class="px-3 py-1 text-gray-300">
                              ${item.name || item.description || '—'}
                            </td>
                            <td class="px-3 py-1 text-right text-gray-400">
                              ${item.quantity ?? '—'}
                            </td>
                            <td class="px-3 py-1 text-right text-gray-400">
                              $${Number(item.rate ?? item.price ?? 0).toFixed(2)}
                            </td>
                            <td class="px-3 py-1 text-right text-gray-200">
                              $${(
                                (typeof item.quantity === 'number'
                                  ? item.quantity
                                  : parseFloat(item.quantity || 0)) *
                                (typeof item.rate === 'number'
                                  ? item.rate
                                  : parseFloat(item.rate || item.price || 0))
                              ).toFixed(2)}
                            </td>
                          </tr>
                        `,
                      ''
                    );
                    const total = invoice.line_items
                      .reduce(
                        (sum, item) =>
                          sum +
                          (typeof item.quantity === 'number'
                            ? item.quantity
                            : parseFloat(item.quantity || 0)) *
                            (typeof item.rate === 'number'
                              ? item.rate
                              : parseFloat(item.rate || item.price || 0)),
                        0
                      )
                      .toFixed(2);
                    lineItemsHtml = `
                        <table class="w-full text-xs">
                          <thead>
                            <tr class="text-sm uppercase text-gray-400 bg-neutral-800">
                              <th class="px-3 py-2 text-left">Description</th>
                              <th class="px-3 py-2 text-right">Quantity</th>
                              <th class="px-3 py-2 text-right">Price</th>
                              <th class="px-3 py-2 text-right">Total</th>
                            </tr>
                          </thead>
                          <tbody>
                            ${itemsRows}
                            <tr>
                              <td class="px-3 py-2 text-right text-gray-300" colspan="3">Total:</td>
                              <td class="px-3 py-2 text-right text-gray-100">$${total}</td>
                            </tr>
                          </tbody>
                        </table>
                      `;
                  } else {
                    lineItemsHtml = `<div class="text-gray-500 italic">No line items.</div>`;
                  }
                  return `
          <tr class="hover:bg-blue-700 transition-colors duration-200 cursor-pointer" data-invoice-id="${invoice.invoice_id}">
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200">
              <input type="checkbox" class="form-checkbox text-blue-600 row-checkbox" />
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-blue-400 hover:underline cursor-pointer" data-invoice-toggle>${invoice.invoice_number}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200">${invoice.cf_customer_name}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200">${invoice.date || '—'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-center text-green-400">${invoice.status}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200">${invoice.due_date}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200">$${Number(invoice.total || 0).toFixed(2)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-200">$${Number(invoice.balance || 0).toFixed(2)}</td>
            <td class="px-6 py-4 whitespace-normal text-sm text-gray-200">${invoice.reference_number || '—'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-200 text-center">
              <div class="relative inline-block text-left">
                <button class="text-gray-400 hover:text-white focus:outline-none" aria-label="Open actions">&#8942;</button>
              </div>
            </td>
          </tr>
          <tr class="hidden bg-neutral-800" data-invoice-details-for="${invoice.invoice_id}">
            <td colspan="10" class="px-6 py-4 text-sm text-gray-300">
              ${lineItemsHtml}
            </td>
          </tr>
        `;
                })
                .join('')
            : `
          <tr>
            <td colspan="10" class="px-6 py-4 text-center text-gray-400">No invoices found.</td>
          </tr>
        `;

        // Always call these after rendering table
        attachRowToggleListeners();
        attachRowCheckboxListeners();
        updateSelectAllCheckbox();

        paginationDisplay.textContent = invoices.length
          ? `${(page - 1) * limit + 1} - ${(page - 1) * limit + invoices.length}`
          : 'No invoices';

        updatePaginationButtons();
      }

      function attachRowToggleListeners() {
        const toggleCells = document.querySelectorAll('[data-invoice-toggle]');
        toggleCells.forEach((cell) => {
          cell.onclick = () => {
            const row = cell.closest('tr');
            const invoiceId = row.getAttribute('data-invoice-id');
            const detailsRow = document.querySelector(
              `tr[data-invoice-details-for="${invoiceId}"]`
            );
            if (detailsRow) {
              const isHidden = detailsRow.classList.contains('hidden');
              if (isHidden) {
                detailsRow.classList.remove('hidden');
              } else {
                detailsRow.classList.add('hidden');
              }
            }
          };
        });
      }

      function attachRowCheckboxListeners() {
        const rowCheckboxes = document.querySelectorAll('input.row-checkbox');
        rowCheckboxes.forEach((checkbox) => {
          checkbox.addEventListener('change', updateSelectAllCheckbox);
        });
      }

      function updateSelectAllCheckbox() {
        const rowCheckboxes = document.querySelectorAll('input.row-checkbox');
        const allChecked = Array.from(rowCheckboxes).every((cb) => cb.checked);
        selectAllCheckbox.checked = allChecked && rowCheckboxes.length > 0;
        const someChecked = Array.from(rowCheckboxes).some((cb) => cb.checked);
        selectAllCheckbox.indeterminate = !allChecked && someChecked;
      }

      selectAllCheckbox.addEventListener('change', () => {
        const rowCheckboxes = document.querySelectorAll('input.row-checkbox');
        rowCheckboxes.forEach((cb) => {
          cb.checked = selectAllCheckbox.checked;
        });
      });

      form.addEventListener('change', async (e) => {
        if (e.target.tagName === 'SELECT') {
          limit = parseInt(e.target.value, 10);
          currentPage = 1;
          await fetchAndRenderInvoices(currentPage, limit);
        }
      });

      prevBtn.addEventListener('click', async () => {
        if (currentPage > 1) {
          currentPage -= 1;
          await fetchAndRenderInvoices(currentPage, limit);
        }
      });
      nextBtn.addEventListener('click', async () => {
        if (hasMorePage) {
          currentPage += 1;
          await fetchAndRenderInvoices(currentPage, limit);
        }
      });

      // Initial state for buttons
      hasMorePage =
        document.querySelector('tbody').children.length / 2 === limit;
      updatePaginationButtons();
      attachRowToggleListeners();
      attachRowCheckboxListeners();
      updateSelectAllCheckbox();
    });
  </script>
</Layout>

<style>
  .bg-blue-800 {
    background-color: #1e40af; /* or a darker blue that matches your theme */
  }
</style>
